extend type Query {
  events(offset: Int, limit: Int): [Event!]!
  eventById(id: Int!): Event
  eventByIds(ids: [Int!]!): [Event!]!

  newlyCreatedNearbyEvents(longitude: Float!, latitude: Float!, offset: Int, limit: Int): [Event!]!
  todaysNearbyEvents(longitude: Float!, latitude: Float!, offset: Int, limit: Int): [Event!]!
  interestingNearbyEvents(longitude: Float!, latitude: Float!, userId: Int!, offset: Int, limit: Int): [Event!]!
  similarEvents(eventId: Int!, city: String!, eventTypeIds: [Int!]!, offset: Int, limit: Int): [Event!]!

  filterEvents(
    offset: Int
    limit: Int
    eventTypeIds: [Int!]
    start_datetime: String
    end_datetime: String
    filterLocation: FilterLocationInput
    sort: SortType
  ): [Event!]
}

extend type Mutation {
  createEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  editEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  deleteEvent(event_id: Int!, location_id: Int!): String!
}

type Event {
  id: Int!
  name: String!
  summary: String!
  description: String
  image_filePath: String
  start_datetime: String!
  end_datetime: String!
  capacity: Int!
  allow_waitlist: Boolean!
  created_at: String!

  author_id: Int
  group_id: Int
  location_id: Int!

  author: User!
  event_types: [EventType!]!
  location: Location!
  participants: [User!]!
}

input EventInput {
  id: Int
  name: String!
  summary: String!
  description: String
  author_id: Int
  group_id: Int
  capacity: Int!
  allow_waitlist: Boolean!
  image_filePath: String
  start_datetime: String!
  end_datetime: String!

  location_id: Int
}

input FilterLocationInput {
  latitude: Float!
  longitude: Float!
  distance: Int!
}

enum SortType {
  DISTANCE,
  DATE
}
