extend type Query {
  users(offset: Int, limit: Int): [User!]!
  userById(id: Int!): User
  usersByIds(ids: [Int!]!): [User!]!
}

extend type Mutation {
  signIn(email: String!, password: String!): AuthInfo!
  signUp(email: String!, password: String!, first_name: String!, last_name: String!): AuthInfo!
  verify(token: String!): String!
  requestResetPassword(email: String!): Boolean!
  resetPassword(password: String!, token: String!): Boolean!
  editUser(user: UserInput!, location: LocationInput!): User!
  deleteUser(id: Int!): String!
  onboardUser(user: UserInput!, location: LocationInput!): User!
}

type User { # Public info about user
  id: Int!
  email: String!
  first_name: String!
  last_name: String!
  verified: Boolean!
  location_id: Int
  description: String

  event_types: [EventType!]!
  location: Location
}

type AuthUser { # Private info about user (e.g. with email address, ...)
  id: Int!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  verified: Boolean!

  event_types: [EventType!]!

  location_id: Int!

  location: Location
}

type AuthInfo {
  user: AuthUser!
  token: String!
}

input UserInput {
  id: Int
  email: String!
  first_name: String!
  last_name: String!
  verified: Boolean!
  location_id: Int
  description: String

  event_type_ids: [Int!]!
}

