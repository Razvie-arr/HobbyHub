type AuthInfo {
  token: String!
  user: AuthUser!
}

type AuthUser {
  description: String
  email: String!
  event_types: [EventType!]!
  first_name: String!
  id: Int!
  last_name: String!
  location: Location
  location_id: Int
  password: String!
  verified: Boolean!
}

union Author = Group | User

type Event {
  allow_waitlist: Boolean!
  author: Author!
  author_id: Int
  capacity: Int!
  created_at: String!
  description: String
  end_datetime: String!
  event_types: [EventType!]!
  group_id: Int
  id: Int!
  image_filepath: String
  location: Location!
  location_id: Int!
  name: String!
  participants: [User!]!
  start_datetime: String!
  summary: String!
}

input EventInput {
  allow_waitlist: Boolean!
  author_id: Int
  capacity: Int!
  description: String
  end_datetime: String!
  event_type_ids: [Int!]!
  group_id: Int
  id: Int
  image_filepath: String
  location_id: Int
  name: String!
  start_datetime: String!
  summary: String!
}

type EventType {
  category: String!
  id: Int!
  name: String!
}

input FilterLocationInput {
  distance: Int!
  latitude: Float!
  longitude: Float!
}

type Group {
  admin: User!
  admin_id: Int!
  description: String
  event_types: [EventType!]!
  events: [Event!]!
  id: Int!
  image_filepath: String
  location: Location!
  location_id: Int!
  members: [User!]!
  name: String!
  summary: String!
}

enum GroupSortType {
  DISTANCE
  NAME
}

type Location {
  city: String!
  country: String!
  id: Int!
  latitude: Float!
  longitude: Float!
  street_name: String!
  street_number: String!
}

input LocationInput {
  city: String!
  country: String!
  id: Int
  latitude: Float!
  longitude: Float!
  street_name: String!
  street_number: String!
}

input LocationInputWithoutCoords {
  city: String!
  country: String!
  id: Int
  street_name: String!
  street_number: String!
}

type Message {
  id: Int!
  sender: User!
  sender_id: Int!
  sent_at: String!
  text: String!
  thread_id: Int!
}

type Mutation {
  _empty(nothing: String): String
  createEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  createLocation(location: LocationInputWithoutCoords!): Location
  deleteEvent(event_id: Int!, location_id: Int!): String!
  deleteLocation(id: Int!): String!
  deleteUser(id: Int!): String!
  editEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  editLocation(location: LocationInputWithoutCoords!): Location
  editReadThread(read: Boolean!, threadId: Int!, userId: Int!): String!
  editUser(location: LocationInputWithoutCoords!, user: UserInput!): User!
  onboardUser(location: LocationInputWithoutCoords!, user: UserInput!): AuthUser!
  requestResetPassword(email: String!): Boolean!
  resetPassword(password: String!, token: String!): Boolean!
  sendMessage(recipientId: Int!, senderId: Int!, text: String!): String!
  signIn(email: String!, password: String!): AuthInfo!
  signUp(email: String!, first_name: String!, last_name: String!, password: String!): AuthInfo!
  uploadEventImage(event_image: Upload): String
  verify(token: String!): String!
}

type Query {
  _empty(nothing: String): String
  eventById(id: Int!): Event
  eventTypeById(id: Int!): EventType
  eventTypes(limit: Int, offset: Int): [EventType!]!
  eventTypesByIds(ids: [Int!]!): [EventType!]!
  events(limit: Int, offset: Int): [Event!]!
  eventsByIds(ids: [Int!]!): [Event!]!
  filterEvents(
    end_datetime: String
    eventTypeIds: [Int!]
    filterLocation: FilterLocationInput
    limit: Int
    offset: Int
    sort: SortType
    start_datetime: String
  ): [Event!]
  filterGroups(
    eventTypeIds: [Int!]
    filterLocation: FilterLocationInput
    limit: Int
    offset: Int
    sort: GroupSortType
  ): [Group!]!
  groupById(id: Int!): Group
  groups(limit: Int, offset: Int): [Group!]!
  groupsByIds(ids: [Int!]!): [Group!]!
  interestingNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int, userId: Int!): [Event!]!
  interestingNearbyGroups(latitude: Float!, limit: Int, longitude: Float!, offset: Int, userId: Int!): [Group!]!
  locationById(id: Int!): Location
  locations(limit: Int, offset: Int): [Location!]!
  locationsByIds(ids: [Int!]!): [Location!]!
  messagesByThreadId(limit: Int, offset: Int, threadId: Int!): [Message!]!
  nearbyGroups(latitude: Float!, limit: Int, longitude: Float!, offset: Int): [Group!]!
  newlyCreatedNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int): [Event!]!
  searchEvents(limit: Int, offset: Int, text: String!): [Event!]!
  similarEvents(city: String!, eventId: Int!, eventTypeIds: [Int!]!, limit: Int, offset: Int): [Event!]!
  threads(limit: Int, offset: Int, userId: Int!): [Thread!]!
  todaysNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int): [Event!]!
  userById(id: Int!): User
  users(limit: Int, offset: Int): [User!]!
  usersByIds(ids: [Int!]!): [User!]!
}

enum SortType {
  DATE
  DISTANCE
}

type Thread {
  id: Int!
  lastMessage: Message!
  last_message_at: String
  messages: [Message!]!
  thread_read: Boolean!
  users: [User!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  description: String
  email: String!
  event_types: [EventType!]!
  events: [Event!]!
  first_name: String!
  groups: [Group!]!
  id: Int!
  last_name: String!
  location: Location
  location_id: Int
  verified: Boolean!
}

input UserInput {
  description: String
  email: String!
  event_type_ids: [Int!]!
  first_name: String!
  id: Int!
  last_name: String!
  location_id: Int
  verified: Boolean!
}
