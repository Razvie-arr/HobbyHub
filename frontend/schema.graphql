type AuthInfo {
  token: String!
  user: AuthUser!
}

type AuthUser {
  description: String
  email: String!
  event_types: [EventType!]!
  first_name: String!
  groups: [Group!]!
  id: Int!
  last_name: String!
  location: Location
  location_id: Int
  verified: Boolean!
}

input AuthUserInput {
  description: String
  email: String!
  event_type_ids: [Int!]!
  first_name: String!
  id: Int!
  last_name: String!
  location_id: Int
  password: String!
  verified: Boolean!
}

union Author = Group | User

type Event {
  allow_waitlist: Boolean!
  author: Author!
  author_id: Int
  cancelled: Boolean!
  capacity: Int!
  created_at: String!
  description: String
  end_datetime: String!
  event_types: [EventType!]!
  feedback_request_sent: Boolean!
  group_id: Int
  id: Int!
  image_filepath: String
  location: Location!
  location_id: Int!
  name: String!
  participants: [ParticipantType!]!
  start_datetime: String!
  summary: String!
}

input EventEmailInput {
  id: Int!
  name: String!
}

input EventInput {
  allow_waitlist: Boolean!
  author_id: Int
  capacity: Int!
  description: String
  end_datetime: String!
  event_type_ids: [Int!]!
  group_id: Int
  id: Int
  image_filepath: String
  location_id: Int
  name: String!
  start_datetime: String!
  summary: String!
}

type EventType {
  category: String!
  id: Int!
  name: String!
}

input FilterLocationInput {
  distance: Int!
  latitude: Float!
  longitude: Float!
}

type Group {
  admin: User!
  admin_id: Int!
  description: String
  event_types: [EventType!]!
  events: [Event!]!
  id: Int!
  image_filepath: String
  location: Location!
  location_id: Int!
  members: [User!]!
  name: String!
  summary: String!
}

input GroupInput {
  admin_id: Int!
  description: String
  event_type_ids: [Int!]!
  id: Int
  image_filepath: String
  location_id: Int
  name: String!
  summary: String!
}

enum GroupSortType {
  DISTANCE
  NAME
}

type Location {
  city: String!
  country: String!
  id: Int!
  latitude: Float!
  longitude: Float!
  street_name: String!
  street_number: String!
}

input LocationInput {
  city: String!
  country: String!
  id: Int
  latitude: Float!
  longitude: Float!
  street_name: String!
  street_number: String!
}

input LocationInputWithoutCoords {
  city: String!
  country: String!
  id: Int
  street_name: String!
  street_number: String!
}

type Message {
  id: Int!
  sender: User!
  sender_id: Int!
  sent_at: String!
  text: String!
  thread_id: Int!
}

type Mutation {
  _empty(nothing: String): String
  askForFeedback: [String!]!
  blockUser(blocked_id: Int!, blocker_id: Int!): String
  cancelEvent(eventId: Int!): String!
  changePassword(id: Int!, password: String!): Boolean!
  createEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  createGroup(group: GroupInput!, location: LocationInputWithoutCoords!): Group!
  createLocation(location: LocationInputWithoutCoords!): Location
  createReview(eventId: Int!, rating: Float!, reviewerId: Int!, text: String!, userId: Int!): Review!
  deleteEvent(event_id: Int!, location_id: Int!): String!
  deleteGroup(group_id: Int!, location_id: Int!): String!
  deleteLocation(id: Int!): String!
  deleteUser(id: Int!): String!
  editAuthUser(location: LocationInputWithoutCoords!, user: AuthUserInput!): AuthUser!
  editEvent(event: EventInput!, location: LocationInputWithoutCoords!): Event!
  editGroup(group: GroupInput!, location: LocationInputWithoutCoords!): Group!
  editLocation(location: LocationInputWithoutCoords!): Location
  editReadThread(read: Boolean!, threadId: Int!, userId: Int!): String!
  editUser(location: LocationInputWithoutCoords!, user: UserInput!): User!
  massEmailToEventParticipants(emailBody: String!, emailSubject: String!, eventId: Int!): String!
  maxRatingAllParticipants(adminId: Int!, eventId: Int!): Boolean!
  moreEventsLikeThis(
    emailBody: String!
    event: EventEmailInput!
    recipient: UserEmailInput!
    sender: UserEmailInput!
  ): String!
  onboardUser(location: LocationInputWithoutCoords!, user: UserInput!): AuthUser!
  requestEventRegistration(eventRegistration: RequestEventRegistrationInput!): String!
  requestResetPassword(email: String!): Boolean!
  resetPassword(password: String!, token: String!): Boolean!
  resolveEventRegistration(resolve: ResolveEventRegistrationInput!): String!
  sendMessage(recipient: RecipientInput!, sender: SenderInput!, text: String!): String!
  signIn(email: String!, password: String!): AuthInfo!
  signUp(email: String!, first_name: String!, last_name: String!, password: String!): AuthInfo!
  unblockUser(blocked_id: Int!, blocker_id: Int!): String
  uploadEventImage(event_image: Upload): String
  uploadGroupImage(group_image: Upload): String
  verify(token: String!): String!
}

enum ParticipantState {
  ACCEPTED
  PENDING
}

type ParticipantType {
  state: ParticipantState!
  text: String
  user: User!
}

type Query {
  _empty(nothing: String): String
  authUserById(id: Int!): AuthUser
  eventById(id: Int!): Event
  eventTypeById(id: Int!): EventType
  eventTypes(limit: Int, offset: Int): [EventType!]!
  eventTypesByIds(ids: [Int!]!): [EventType!]!
  events(limit: Int, offset: Int): [Event!]!
  eventsByIds(ids: [Int!]!): [Event!]!
  filterEvents(
    end_datetime: String
    eventTypeIds: [Int!]
    filterLocation: FilterLocationInput
    limit: Int
    offset: Int
    sort: SortType
    start_datetime: String
    user_id: Int
  ): [Event!]
  filterGroups(
    eventTypeIds: [Int!]
    filterLocation: FilterLocationInput
    limit: Int
    offset: Int
    sort: GroupSortType
  ): [Group!]!
  groupById(id: Int!): Group
  groups(limit: Int, offset: Int): [Group!]!
  groupsByIds(ids: [Int!]!): [Group!]!
  interestingNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int, userId: Int!): [Event!]!
  interestingNearbyGroups(latitude: Float!, limit: Int, longitude: Float!, offset: Int, userId: Int!): [Group!]!
  locationById(id: Int!): Location
  locations(limit: Int, offset: Int): [Location!]!
  locationsByIds(ids: [Int!]!): [Location!]!
  messagesByThreadId(limit: Int, offset: Int, threadId: Int!): [Message!]!
  nearbyGroups(latitude: Float!, limit: Int, longitude: Float!, offset: Int): [Group!]!
  newlyCreatedNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int, user_id: Int): [Event!]!
  reviewById(reviewId: Int!): Review
  reviewsByUserId(limit: Int, offset: Int, userId: Int!): [Review!]!
  reviewsCount(userId: Int!): Int!
  searchEvents(limit: Int, offset: Int, text: String!, user_id: Int): [Event!]!
  searchGroups(limit: Int, offset: Int, text: String!, user_id: Int): [Group!]!
  similarEvents(city: String!, eventId: Int!, eventTypeIds: [Int!]!, limit: Int, offset: Int, user_id: Int): [Event!]!
  similarGroups(city: String!, eventTypeIds: [Int!]!, groupId: Int!, limit: Int, offset: Int): [Group!]!
  threads(limit: Int, offset: Int, userId: Int!): [Thread!]!
  todaysNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int, user_id: Int): [Event!]!
  unreviewedEventParticipants(eventId: Int!, userId: Int!): [User!]!
  userAdminGroups(limit: Int, offset: Int, userId: Int!): [Group!]!
  userById(id: Int!): User
  userCreatedEvents(limit: Int, offset: Int, userId: Int!): [Event!]!
  users(limit: Int, offset: Int): [User!]!
  usersByIds(ids: [Int!]!): [User!]!
  weeklyNearbyEvents(latitude: Float!, limit: Int, longitude: Float!, offset: Int, user_id: Int): [Event!]!
}

input RecipientInput {
  email: String!
  first_name: String!
  id: Int!
}

input RequestEventRegistrationInput {
  author_id: Int
  event_id: Int!
  event_name: String!
  group_id: Int
  text: String!
  user_email: String!
  user_id: Int!
  user_name: String!
}

input ResolveEventRegistrationInput {
  event_id: Int!
  event_name: String!
  resolution: Boolean!
  user_email: String!
  user_id: Int!
}

type Review {
  event: Event
  event_id: Int
  id: Int!
  rating: Float!
  reviewer: User!
  reviewer_id: Int!
  text: String!
  user: User!
  user_id: Int!
}

input SenderInput {
  first_name: String!
  id: Int!
}

enum SortType {
  DATE_CREATED
  DATE_START
  DISTANCE
}

type Thread {
  id: Int!
  lastMessage: Message!
  last_message_at: String
  messages: [Message!]!
  thread_read: Boolean!
  users: [User!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  average_rating: Float!
  blockedBy: [User!]
  blocking: [User!]
  description: String
  email: String!
  event_types: [EventType!]!
  events: [Event!]!
  first_name: String!
  groups: [Group!]!
  id: Int!
  last_name: String!
  location: Location
  location_id: Int
  verified: Boolean!
}

input UserEmailInput {
  email: String!
  first_name: String!
  id: Int!
  last_name: String!
}

input UserInput {
  description: String
  email: String!
  event_type_ids: [Int!]!
  first_name: String!
  id: Int!
  last_name: String!
  location_id: Int
  verified: Boolean!
}
